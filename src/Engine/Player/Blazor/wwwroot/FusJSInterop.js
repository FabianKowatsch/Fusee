!function (t) { var e = {}; function i(n) { if (e[n]) return e[n].exports; var r = e[n] = { i: n, l: !1, exports: {} }; return t[n].call(r.exports, r, r.exports, i), r.l = !0, r.exports } i.m = t, i.c = e, i.d = function (t, e, n) { i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n }) }, i.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, i.t = function (t, e) { if (1 & e && (t = i(t)), 8 & e) return t; if (4 & e && "object" == typeof t && t && t.__esModule) return t; var n = Object.create(null); if (i.r(n), Object.defineProperty(n, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var r in t) i.d(n, r, function (e) { return t[e] }.bind(null, r)); return n }, i.n = function (t) { var e = t && t.__esModule ? function () { return t.default } : function () { return t }; return i.d(e, "a", e), e }, i.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, i.p = "", i(i.s = 0) }([function (t, e, i) { "use strict"; Object.defineProperty(e, "__esModule", { value: !0 }); const n = i(1); var r; !function (t) { const e = "BlazorExtensions", i = { WebGL2: new n.ContextManager("webgl2") }; t.initialize = function () { "undefined" == typeof window || window[e] ? window[e] = { ...window[e], ...i } : window[e] = { ...i } } }(r || (r = {})), r.initialize() }, function (t, e, i) { "use strict"; Object.defineProperty(e, "__esModule", { value: !0 }); e.ContextManager = class { constructor(t) { this.webGLObject = new Array, this.webGLContext = !1, this.webGLTypes = [WebGLBuffer, WebGLShader, WebGLProgram, WebGLFramebuffer, WebGLRenderbuffer, WebGLTexture, WebGLUniformLocation], this.add = ((t, e) => { if (this.context = e ? t.getContext("webgl2", e) : t.getContext("webgl2"), !this.context) throw new Error("Invalid context.") }), this.remove = (t => { this.context = void 0 }), this.setProperty = ((t, e, i) => { this.setPropertyWithContext(this.context, e, i) }), this.getProperty = ((t, e) => { if (void 0 !== this.context) return this.serialize(this.context[e]) }), this.call = ((t, e, i) => this.callWithContext(this.context, e, i)), this.callBatch = ((t, e) => { const i = this.context; for (let t = 0; t < e.length; t++) { let n = e[t].slice(2); e[t][1] ? this.callWithContext(i, e[t][0], n) : this.setPropertyWithContext(i, e[t][0], Array.isArray(n) && n.length > 0 ? n[0] : null) } }), this.callWithContext = ((t, e, i) => this.serialize(this.prototypes[e].apply(this.context, void 0 != i ? i.map(t => this.deserialize(e, t)) : []))), this.setPropertyWithContext = ((t, e, i) => { void 0 !== this.context && (this.context[e] = this.deserialize(e, i)) }), this.getContext = (t => this.context), this.deserialize = ((t, e) => { if (!this.webGLContext || void 0 === e) return e; if (e.hasOwnProperty("webGLType") && e.hasOwnProperty("id")) return this.webGLObject[e.id]; if (Array.isArray(e) && !t.endsWith("v")) return Int8Array.of(...e); if ("string" != typeof e || "bufferData" !== t && "bufferSubData" !== t) return e; { let t = window.atob(e), i = t.length, n = new Uint8Array(i); for (let e = 0; e < i; e++)n[e] = t.charCodeAt(e); return n } }), this.serialize = (t => { if (t instanceof TextMetrics) return { width: t.width }; if (!this.webGLContext || void 0 === t) return t; const e = this.webGLTypes.find(e => t instanceof e); if (void 0 !== e) { const i = this.webGLObject.length; return this.webGLObject.push(t), { webGLType: e.name, id: i } } return t instanceof WebGLActiveInfo ? (this.webGLObject.push(t), { name: t.name, size: t.size, type: t.type }) : t }), this.contextName = t, this.prototypes = WebGL2RenderingContext.prototype, this.webGLContext = !0 } } }]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,