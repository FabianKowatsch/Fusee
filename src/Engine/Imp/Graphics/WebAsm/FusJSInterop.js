!function (t) { var e = {}; function n(r) { if (e[r]) return e[r].exports; var i = e[r] = { i: r, l: !1, exports: {} }; return t[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports } n.m = t, n.c = e, n.d = function (t, e, r) { n.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: r }) }, n.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, n.t = function (t, e) { if (1 & e && (t = n(t)), 8 & e) return t; if (4 & e && "object" == typeof t && t && t.__esModule) return t; var r = Object.create(null); if (n.r(r), Object.defineProperty(r, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var i in t) n.d(r, i, function (e) { return t[e] }.bind(null, i)); return r }, n.n = function (t) { var e = t && t.__esModule ? function () { return t.default } : function () { return t }; return n.d(e, "a", e), e }, n.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, n.p = "", n(n.s = 0) }([function (t, e, n) { "use strict"; Object.defineProperty(e, "__esModule", { value: !0 }); const r = n(1); var i; !function (t) { const e = "BlazorExtensions", n = { WebGL: new r.ContextManager("webgl2") }; t.initialize = function () { "undefined" == typeof window || window[e] ? window[e] = { ...window[e], ...n } : window[e] = { ...n } } }(i || (i = {})), i.initialize() }, function (t, e, n) { "use strict"; Object.defineProperty(e, "__esModule", { value: !0 }); e.ContextManager = class { constructor(t) { if (this.contexts = new Map, this.webGLObject = new Array, this.webGLContext = !1, this.webGLTypes = [WebGLBuffer, WebGLShader, WebGLProgram, WebGLFramebuffer, WebGLRenderbuffer, WebGLTexture, WebGLUniformLocation], this.add = ((t, e) => { if (!t) throw new Error("Invalid canvas."); if (this.contexts.get(t.id)) return; let n; if (!(n = e ? t.getContext(this.contextName, e) : t.getContext(this.contextName))) throw new Error("Invalid context."); this.contexts.set(t.id, n) }), this.remove = (t => { this.contexts.delete(t.id) }), this.setProperty = ((t, e, n) => { const r = this.getContext(t); this.setPropertyWithContext(r, e, n) }), this.getProperty = ((t, e) => { const n = this.getContext(t); return this.serialize(n[e]) }), this.call = ((t, e, n) => { const r = this.getContext(t); return this.callWithContext(r, e, n) }), this.callBatch = ((t, e) => { const n = this.getContext(t); for (let t = 0; t < e.length; t++) { let r = e[t].slice(2); e[t][1] ? this.callWithContext(n, e[t][0], r) : this.setPropertyWithContext(n, e[t][0], Array.isArray(r) && r.length > 0 ? r[0] : null) } }), this.callWithContext = ((t, e, n) => this.serialize(this.prototypes[e].apply(t, void 0 != n ? n.map(t => this.deserialize(e, t)) : []))), this.setPropertyWithContext = ((t, e, n) => { t[e] = this.deserialize(e, n) }), this.getContext = (t => { if (!t) throw new Error("Invalid canvas."); const e = this.contexts.get(t.id); if (!e) throw new Error("Invalid context."); return e }), this.deserialize = ((t, e) => { if (!this.webGLContext || void 0 === e) return e; if (e.hasOwnProperty("webGLType") && e.hasOwnProperty("id")) return this.webGLObject[e.id]; if (Array.isArray(e) && !t.endsWith("v")) return Int8Array.of(...e); if ("string" != typeof e || "bufferData" !== t && "bufferSubData" !== t) return e; { let t = window.atob(e), n = t.length, r = new Uint8Array(n); for (let e = 0; e < n; e++)r[e] = t.charCodeAt(e); return r } }), this.serialize = (t => { if (t instanceof TextMetrics) return { width: t.width }; if (!this.webGLContext || void 0 === t) return t; const e = this.webGLTypes.find(e => t instanceof e); if (void 0 !== e) { const n = this.webGLObject.length; return this.webGLObject.push(t), { webGLType: e.name, id: n } } return t instanceof WebGLActiveInfo ? (this.webGLObject.push(t), { name: t.name, size: t.size, type: t.type }) : t }), this.contextName = t, "2d" === t) this.prototypes = CanvasRenderingContext2D.prototype; else { if ("webgl2" !== t && "experimental-webgl" !== t && "webgl" !== t) throw new Error(`Invalid context name: ${t}`); this.prototypes = WebGL2RenderingContext.prototype, this.webGLContext = !0 } } } }]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,